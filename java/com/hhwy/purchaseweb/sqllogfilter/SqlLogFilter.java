package com.hhwy.purchaseweb.sqllogfilter;

import java.sql.SQLException;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Component;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import com.alibaba.druid.filter.FilterChain;
import com.alibaba.druid.filter.FilterEventAdapter;
import com.alibaba.druid.proxy.jdbc.ConnectionProxy;
import com.alibaba.druid.proxy.jdbc.PreparedStatementProxy;
import com.alibaba.druid.proxy.jdbc.ResultSetProxy;
import com.alibaba.druid.proxy.jdbc.StatementProxy;
import com.hhwy.business.core.sqlfilter.CompanyDomainInfoUtil;
import com.hhwy.business.system.domain.UserInfo;
import com.hhwy.business.system.util.SystemServiceUtil;
import com.hhwy.framework.container.AppContainer;
import com.hhwy.framework.persistent.DAO;
import com.hhwy.selling.domain.SwDbLog;

/**		记录数据库增删改日志的过滤器
 * <b>类 名 称：</b>SqlLogFilter<br/>
 * <b>类 描 述：</b><br/>
 * <b>创 建 人：</b>wangzelu<br/>
 * <b>修 改 人：</b>wangzelu<br/>
 * <b>修改时间：</b>2018年7月26日 下午2:21:04<br/>
 * <b>修改备注：</b><br/>
 * @version 1.0.0<br/>
 */
@Component
public class SqlLogFilter extends FilterEventAdapter {

    public ResultSetProxy statement_executeQuery(FilterChain chain,
            StatementProxy statement, String sql) throws SQLException {
//    	Map<String, Object> params =  statement.getAttributes();
//    	System.out.println("================" + params.toString());
        insertLogToDB(sql);
        return super.statement_executeQuery(chain, statement, sql);
    }

    public PreparedStatementProxy connection_prepareStatement(
            FilterChain chain, ConnectionProxy connection, String sql)
            throws SQLException {
//    	Map<String, Object> params = connection.getAttributes();
        insertLogToDB(sql);
        return super.connection_prepareStatement(chain, connection, sql);
    }

    public PreparedStatementProxy connection_prepareStatement(
            FilterChain chain, ConnectionProxy connection, String sql,
            int autoGeneratedKeys) throws SQLException {
        insertLogToDB(sql);
        return super.connection_prepareStatement(chain, connection, sql,
                autoGeneratedKeys);
    }

    public PreparedStatementProxy connection_prepareStatement(
            FilterChain chain, ConnectionProxy connection, String sql,
            int resultSetType, int resultSetConcurrency) throws SQLException {
        insertLogToDB(sql);
        return super.connection_prepareStatement(chain, connection, sql,
                resultSetType, resultSetConcurrency);
    }

    public PreparedStatementProxy connection_prepareStatement(
            FilterChain chain, ConnectionProxy connection, String sql,
            int resultSetType, int resultSetConcurrency,
            int resultSetHoldability) throws SQLException {
        insertLogToDB(sql);
        return super.connection_prepareStatement(chain, connection, sql,
                resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    public PreparedStatementProxy connection_prepareStatement(
            FilterChain chain, ConnectionProxy connection, String sql,
            int[] columnIndexes) throws SQLException {
        insertLogToDB(sql);
        return super.connection_prepareStatement(chain, connection, sql,
                columnIndexes);
    }

    public PreparedStatementProxy connection_prepareStatement(
            FilterChain chain, ConnectionProxy connection, String sql,
            String[] columnNames) throws SQLException {
        insertLogToDB(sql);
        return super.connection_prepareStatement(chain, connection, sql,
                columnNames);
    }

    /**
     * @Title: insertLogToDB
     * @Description: 往数据库中保持sql的log信息
     * @param sql
     * @return 
     * String
     * <b>创 建 人：</b>wangzelu<br/>
     * <b>创建时间:</b>2018年7月26日 下午5:52:42
     * <b>修 改 人：</b>wangzelu<br/>
     * <b>修改时间:</b>2018年7月26日 下午5:52:42
     * @since  1.0.0
     */
    private void insertLogToDB(String sql) {
    	sql = sql.trim();
    	//如果是s_w_db_log表的操作，则直接跳过
    	if(sql.matches("^[\\s\\S]*(?i)(\\bs_w_db_log\\b)[\\s\\S]*$")) {
    		return;
    	}
    	//判断是否是增删改语句
    	if(sql.matches("^[\\s\\S]*(?i)(\\binsert\\s*into\\b|\\bupdate\\b|\\bdelete\\b|\\breplace\\s*into\\b)[\\s\\S]*$")) {
    		DAO<?> dao = AppContainer.getBean(DAO.class);
    		SwDbLog log = new SwDbLog();
    		UserInfo user = SystemServiceUtil.getLoginUserInfo();
    		if(user != null) {
    			log.setOperator(user.getUserName());
    		}
    		if(sql.length() > 6000) {
    			log.setSql(sql.substring(0, 6000));
    		}else {
    			log.setSql(sql);
    		}
    		log.setOperateTime(new Date());
    		if(sql.matches("^[\\s\\S]*(?i)(\\binsert\\s*into\\b)[\\s\\S]*$")) {
    			log.setType("新增");
    		}else if(sql.matches("^[\\s\\S]*(?i)(\\bupdate\\b)[\\s\\S]*$")) {
    			log.setType("修改");
    		}else if(sql.matches("^[\\s\\S]*(?i)(\\bdelete\\b)[\\s\\S]*$")) {
    			log.setType("删除");
    		}else if(sql.matches("^[\\s\\S]*(?i)(\\breplace\\s*into\\b)[\\s\\S]*$")) {
    			log.setType("替换");
    		}
    		try {
				ServletRequestAttributes attr = (ServletRequestAttributes)RequestContextHolder.getRequestAttributes();
				HttpServletRequest request = attr.getRequest();
				String remoteAddr = request.getRemoteAddr();
		        String forwarded = request.getHeader("X-Forwarded-For");
		        String realIp = request.getHeader("X-Real-IP");
		        log.setParams("IP:"+remoteAddr+",forwarded:"+forwarded+",realIp:"+realIp);
			} catch (Exception e) {
			}
    		String currentdb = null;
	        try {
	            currentdb = CompanyDomainInfoUtil.getInstance().currentDatabase();
	        } catch (Exception e) {
	            e.printStackTrace();
	        }
    		log.setCompanyDomain(currentdb);
    		dao.save(log);
    	}
    }
}
